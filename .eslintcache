[{"/home/phoenix/Documents/chart_bigdata_reactjs/src/index.js":"1","/home/phoenix/Documents/chart_bigdata_reactjs/src/reportWebVitals.js":"2","/home/phoenix/Documents/chart_bigdata_reactjs/src/App.js":"3","/home/phoenix/Documents/chart_bigdata_reactjs/src/tags.js":"4","/home/phoenix/Documents/chart_bigdata_reactjs/src/TagChart.js":"5","/home/phoenix/Documents/chart_bigdata_reactjs/src/AnalysisChart.js":"6"},{"size":500,"mtime":1608225940521,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1608225940521,"results":"9","hashOfConfig":"8"},{"size":505,"mtime":1608531863871,"results":"10","hashOfConfig":"8"},{"size":2123,"mtime":1608546164890,"results":"11","hashOfConfig":"8"},{"size":6927,"mtime":1608539040615,"results":"12","hashOfConfig":"8"},{"size":7270,"mtime":1608544779270,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1rsd9h2",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"16"},"/home/phoenix/Documents/chart_bigdata_reactjs/src/index.js",[],["30","31"],"/home/phoenix/Documents/chart_bigdata_reactjs/src/reportWebVitals.js",[],"/home/phoenix/Documents/chart_bigdata_reactjs/src/App.js",["32"],"import React, { Component } from 'react';\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport 'react-tabs/style/react-tabs.css';\nimport AnalysisChart from './AnalysisChart';\nimport TagChart from './TagChart';\n\n\nfunction App() {\n\n  return (\n    <Tabs>\n      <TabList>\n        <Tab>Tag</Tab>\n        <Tab>Title 2</Tab>\n      </TabList>\n\n      <TabPanel>\n        <TagChart />\n      </TabPanel>\n      <TabPanel>\n        <AnalysisChart />\n      </TabPanel>\n    </Tabs>\n  );\n}\n\nexport default App;","/home/phoenix/Documents/chart_bigdata_reactjs/src/tags.js",[],"/home/phoenix/Documents/chart_bigdata_reactjs/src/TagChart.js",["33","34","35","36"],"import React, { Component } from 'react';\nimport tags from \"./tags.js\";\nimport io from \"socket.io-client\";\nimport { useEffect, useState } from 'react';\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\n\nam4core.useTheme(am4themes_animated);\nconst ENDPOINT = \"http://localhost:5001\";\n// const socket = socketIOClient(ENDPOINT, { transports: ['websocket', 'polling', 'flashsocket'] });\nconst socket = io(ENDPOINT, { transports: ['websocket', 'polling', 'flashsocket'] });\n\nfunction TagChart() {\n  const [response, setResponse] = useState([]);\n  const [isStart, setIsStart] = useState(true);\n\n  useEffect(() => {\n    let chart = am4core.create(\"chartdiv\", am4charts.XYChart);\n    socket.on(\"connection\", () => {\n      console.log(\"connect to server\");\n    });\n    socket.on('topic', data => {\n      // message must under the form of [tag:pos:neg:neu]\n      if (isStart) {\n        console.log(data);\n        let found;\n        data = data.slice(1, -1);\n        data = data.split(':');\n        data[1] = parseInt(data[1]);\n        data[2] = parseInt(data[2]);\n        data[3] = parseInt(data[3]);\n\n        if (response.length > 0) {\n          found = false;\n          response.forEach((element) => {\n            if (element[0] === data[0]) {\n              found = true;\n              element[1] += data[1];\n              element[2] += data[2];\n              element[3] += data[3];\n            }\n          })\n\n          if (!found) {\n            response.push(data);\n          }\n        } else {\n          response.push(data);\n        }\n        let allData = [];\n\n        function generateData() {\n          const data = []\n          for (var i = 0; i < response.length; i++) {\n            var dataElement = {\n              choice: response[i][0],\n              numberOfTweets: response[i][1],\n              numberOfTweets2: response[i][2],\n              numberOfTweets3: response[i][3],\n            };\n\n            data.push(dataElement);\n          }\n\n          for (var j = 0; j < data.length; j++) {\n            allData[j] = data[j];\n          }\n\n          allData = allData.sort((a, b) => b.numberOfTweets3 - a.numberOfTweets3).slice(0, 5);\n        }\n\n        generateData();\n        console.log(allData);\n\n        chart.data = JSON.parse(\n          JSON.stringify(allData)\n        );\n        setResponse([...response]);\n      }\n    })\n    am4core.useTheme(am4themes_animated);\n    // Themes end\n    chart.padding(10, 10, 10, 10);\n\n    chart.numberFormatter.bigNumberPrefixes = [\n      { number: 1e3, suffix: \"K\" },\n      { number: 1e6, suffix: \"M\" },\n      { number: 1e9, suffix: \"B\" },\n    ];\n\n    var label = chart.plotContainer.createChild(am4core.Label);\n    label.x = am4core.percent(97);\n    label.y = am4core.percent(95);\n    label.horizontalCenter = \"right\";\n    label.verticalCenter = \"middle\";\n    label.dx = -15;\n    label.fontSize = 40;\n\n    var playButton = chart.plotContainer.createChild(am4core.PlayButton);\n    playButton.x = am4core.percent(97);\n    playButton.y = am4core.percent(95);\n    playButton.dy = -2;\n    playButton.verticalCenter = \"middle\";\n    playButton.events.on(\"toggled\", function (event) {\n      if (event.target.isActive) {\n        play();\n      } else {\n        stop();\n      }\n    });\n\n    chart.legend = new am4charts.Legend();\n    chart.legend.position = \"right\";\n\n    var stepDuration = 0;\n\n    var categoryAxis = chart.yAxes.push(new am4charts.CategoryAxis());\n    categoryAxis.renderer.grid.template.location = 0;\n    categoryAxis.dataFields.category = \"choice\";\n    // categoryAxis.title.text = \"Tags\";\n    categoryAxis.renderer.minGridDistance = 20;\n    categoryAxis.renderer.grid.template.location = 0;\n    categoryAxis.renderer.inversed = true;\n    categoryAxis.renderer.grid.template.disabled = true;\n    categoryAxis.renderer.cellStartLocation = 0.1;\n    categoryAxis.renderer.cellEndLocation = 0.9;\n\n    var valueAxis = chart.xAxes.push(new am4charts.ValueAxis());\n    valueAxis.min = 0;\n    valueAxis.rangeChangeEasing = am4core.ease.linear;\n    valueAxis.rangeChangeDuration = stepDuration;\n    valueAxis.extraMax = 0.1;\n    valueAxis.title.text = \"Number of tweets\";\n\n    var series = chart.series.push(new am4charts.ColumnSeries());\n    series.dataFields.categoryY = \"choice\";\n    series.dataFields.valueX = \"numberOfTweets\";\n    series.name = \"positive\";\n    series.columns.template.strokeOpacity = 0;\n    series.interpolationDuration = stepDuration;\n    series.interpolationEasing = am4core.ease.linear;\n    series.columns.template.column.cornerRadiusBottomRight = 5;\n    series.columns.template.column.cornerRadiusTopRight = 5;\n\n    var series2 = chart.series.push(new am4charts.ColumnSeries());\n    series2.dataFields.categoryY = \"choice\";\n    series2.dataFields.valueX = \"numberOfTweets2\";\n    series2.name = \"negative\";\n    series2.columns.template.strokeOpacity = 0;\n    series2.interpolationDuration = stepDuration;\n    series2.interpolationEasing = am4core.ease.linear;\n    series2.columns.template.column.cornerRadiusBottomRight = 5;\n    series2.columns.template.column.cornerRadiusTopRight = 5;\n\n    var series3 = chart.series.push(new am4charts.ColumnSeries());\n    series3.dataFields.categoryY = \"choice\";\n    series3.dataFields.valueX = \"numberOfTweets3\";\n    series3.name = \"neutral\";\n    series3.columns.template.strokeOpacity = 0;\n    series3.interpolationDuration = stepDuration;\n    series3.interpolationEasing = am4core.ease.linear;\n    series3.columns.template.column.cornerRadiusBottomRight = 5;\n    series3.columns.template.column.cornerRadiusTopRight = 5;\n\n    var labelBullet = series.bullets.push(new am4charts.LabelBullet());\n    labelBullet.locationX = 0.5;\n    labelBullet.label.text = \"{valueX}\";\n    labelBullet.label.fill = am4core.color(\"#fff\");\n\n    var labelBullet2 = series2.bullets.push(new am4charts.LabelBullet());\n    labelBullet2.locationX = 0.5;\n    labelBullet2.label.text = \"{valueX}\";\n    labelBullet2.label.fill = am4core.color(\"#fff\");\n\n    var labelBullet3 = series3.bullets.push(new am4charts.LabelBullet());\n    labelBullet3.locationX = 0.5;\n    labelBullet3.label.text = \"{valueX}\";\n    labelBullet3.label.fill = am4core.color(\"#fff\");\n\n    chart.zoomOutButton.disabled = true;\n\n    var interval;\n\n    function play() {\n      setIsStart(true)\n    }\n\n    function stop() {\n      setIsStart(false)\n    }\n\n    categoryAxis.sortBySeries = series;\n    categoryAxis.sortBySeries = series2;\n    categoryAxis.sortBySeries = series3;\n    categoryAxis.zoom({ start: 0, end: 1 / chart.data.length });\n\n    series.events.on(\"inited\", function () {\n      setTimeout(function () {\n        playButton.isActive = true; // this starts interval\n      }, 10);\n    });\n  }, []);\n\n  return (\n    <>\n      <div id=\"chartdiv\" style={{ width: \"100%\", height: \"100vh\" }}></div>\n    </>\n  );\n}\n\nexport default TagChart;","/home/phoenix/Documents/chart_bigdata_reactjs/src/AnalysisChart.js",["37"],"import React, { Component } from 'react';\nimport io from \"socket.io-client\";\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nimport tags from './tags';\n\nam4core.useTheme(am4themes_animated);\nconst ENDPOINT = \"http://localhost:5001\";\n// const socket = socketIOClient(ENDPOINT, { transports: ['websocket', 'polling', 'flashsocket'] });\nconst socket = io(ENDPOINT, { transports: ['websocket', 'polling', 'flashsocket'] });\n\nexport default class AnalysisChart extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      response: [],\n      isStart: true,\n    }\n  }\n\n  componentDidMount() {\n    var chart = am4core.create(\"chartdiv\", am4charts.XYChart);\n    this.chart = chart\n    socket.on(\"connection\", () => {\n      console.log(\"connect to server\");\n    });\n    socket.on('topic', (data) => {\n      // message must under the form of [tag:pos:neg:neu]\n      if (this.state.isStart) {\n        let found;\n        data = data.slice(1, -1);\n        data = data.split(':');\n        data[1] = parseInt(data[1]);\n        data[2] = parseInt(data[2]);\n        data[3] = parseInt(data[3]);\n\n        if (this.state.response.length > 0) {\n          found = false;\n          this.state.response.forEach((element) => {\n            if (element[0] === 'Joe Biden' && tags.includes(data[0])) {\n              found = true;\n              element[1] += data[1];\n              element[2] += data[2];\n              element[3] += data[3];\n            } else {\n              if (tags.includes(data[0])) {\n\n              }\n            }\n          })\n\n          if (!found) {\n            // this.state.response.push(data)\n            this.setState({\n              response: [...this.state.response, data]\n            })\n          }\n        } else {\n          // this.state.response.push(data)\n          this.setState({\n            response: [...this.state.response, data]\n          })\n        }\n        let allData = [];\n\n        const data1 = []\n        for (var i = 0; i < this.state.response.length; i++) {\n          var dataElement = {\n            choice: 'Joe Biden',\n            numberOfTweets: this.state.response[i][1],\n            numberOfTweets2: this.state.response[i][2],\n          };\n          data1.push(dataElement);\n        }\n\n        for (var j = 0; j < data1.length; j++) {\n          allData[j] = data1[j];\n        }\n\n        //allData = allData.sort((a, b) => b.numberOfTweets - a.numberOfTweets).slice(0, 5);\n        console.log(allData);\n\n        chart.data = JSON.parse(\n          JSON.stringify(allData)\n        );\n        // this.setState({\n        //   response: [...this.state.response],\n        // })\n      }\n    })\n    // Themes end\n    chart.padding(10, 10, 10, 10);\n\n    chart.numberFormatter.bigNumberPrefixes = [\n      { number: 1e3, suffix: \"K\" },\n      { number: 1e6, suffix: \"M\" },\n      { number: 1e9, suffix: \"B\" },\n    ];\n\n    var label = chart.plotContainer.createChild(am4core.Label);\n    label.x = am4core.percent(97);\n    label.y = am4core.percent(95);\n    label.horizontalCenter = \"right\";\n    label.verticalCenter = \"middle\";\n    label.dx = -15;\n    label.fontSize = 40;\n\n    var playButton = chart.plotContainer.createChild(am4core.PlayButton);\n    playButton.x = am4core.percent(97);\n    playButton.y = am4core.percent(95);\n    playButton.dy = -2;\n    playButton.verticalCenter = \"middle\";\n    playButton.events.on(\"toggled\", function (event) {\n      if (event.target.isActive) {\n        play();\n      } else {\n        stop();\n      }\n    });\n\n    chart.legend = new am4charts.Legend();\n    chart.legend.position = \"right\";\n\n    var stepDuration = 0;\n\n    var categoryAxis = chart.yAxes.push(new am4charts.CategoryAxis());\n    categoryAxis.renderer.grid.template.location = 0;\n    categoryAxis.dataFields.category = \"choice\";\n    // categoryAxis.title.text = \"Tags\";\n    categoryAxis.renderer.minGridDistance = 20;\n    categoryAxis.renderer.grid.template.location = 0;\n    categoryAxis.renderer.inversed = true;\n    categoryAxis.renderer.grid.template.disabled = true;\n    categoryAxis.renderer.cellStartLocation = 0.1;\n    categoryAxis.renderer.cellEndLocation = 0.9;\n\n    var valueAxis = chart.xAxes.push(new am4charts.ValueAxis());\n    valueAxis.min = 0;\n    valueAxis.rangeChangeEasing = am4core.ease.linear;\n    valueAxis.rangeChangeDuration = stepDuration;\n    valueAxis.extraMax = 0.1;\n    valueAxis.title.text = \"Number of tweets\";\n\n    var series = chart.series.push(new am4charts.ColumnSeries());\n    series.dataFields.categoryY = \"choice\";\n    series.dataFields.valueX = \"numberOfTweets\";\n    series.name = \"Trump\";\n    series.columns.template.strokeOpacity = 0;\n    series.interpolationDuration = stepDuration;\n    series.interpolationEasing = am4core.ease.linear;\n    series.columns.template.column.cornerRadiusBottomRight = 5;\n    series.columns.template.column.cornerRadiusTopRight = 5;\n\n    var series2 = chart.series.push(new am4charts.ColumnSeries());\n    series2.dataFields.categoryY = \"choice\";\n    series2.dataFields.valueX = \"numberOfTweets2\";\n    series2.name = \"Joe Biden\";\n    series2.columns.template.strokeOpacity = 0;\n    series2.interpolationDuration = stepDuration;\n    series2.interpolationEasing = am4core.ease.linear;\n    series2.columns.template.column.cornerRadiusBottomRight = 5;\n    series2.columns.template.column.cornerRadiusTopRight = 5;\n\n    // var series3 = chart.series.push(new am4charts.ColumnSeries());\n    // series3.dataFields.categoryY = \"choice\";\n    // series3.dataFields.valueX = \"numberOfTweets3\";\n    // series3.name = \"neutral\";\n    // series3.columns.template.strokeOpacity = 0;\n    // series3.interpolationDuration = stepDuration;\n    // series3.interpolationEasing = am4core.ease.linear;\n    // series3.columns.template.column.cornerRadiusBottomRight = 5;\n    // series3.columns.template.column.cornerRadiusTopRight = 5;\n\n    var labelBullet = series.bullets.push(new am4charts.LabelBullet());\n    labelBullet.locationX = 0.5;\n    labelBullet.label.text = \"{valueX}\";\n    labelBullet.label.fill = am4core.color(\"#fff\");\n\n    var labelBullet2 = series2.bullets.push(new am4charts.LabelBullet());\n    labelBullet2.locationX = 0.5;\n    labelBullet2.label.text = \"{valueX}\";\n    labelBullet2.label.fill = am4core.color(\"#fff\");\n\n    // var labelBullet3 = series3.bullets.push(new am4charts.LabelBullet());\n    // labelBullet3.locationX = 0.5;\n    // labelBullet3.label.text = \"{valueX}\";\n    // labelBullet3.label.fill = am4core.color(\"#fff\");\n\n    chart.zoomOutButton.disabled = true;\n\n    var interval;\n\n    function play() {\n    }\n\n    function stop() {\n    }\n\n    categoryAxis.sortBySeries = series;\n    categoryAxis.sortBySeries = series2;\n    // categoryAxis.sortBySeries = series3;\n    categoryAxis.zoom({ start: 0, end: 1 / chart.data.length });\n\n    series.events.on(\"inited\", function () {\n      setTimeout(function () {\n        playButton.isActive = true; // this starts interval\n      }, 10);\n    });\n  }\n\n  componentWillUnmount() {\n    if (this.chart) {\n      this.chart.dispose();\n    }\n  }\n\n  render() {\n    return (\n      <>\n        <div id=\"chartdiv\" style={{ width: \"100%\", height: \"100vh\" }}></div>\n      </>\n    );\n  }\n\n}",{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":1,"column":17,"nodeType":"44","messageId":"45","endLine":1,"endColumn":26},{"ruleId":"42","severity":1,"message":"43","line":1,"column":17,"nodeType":"44","messageId":"45","endLine":1,"endColumn":26},{"ruleId":"42","severity":1,"message":"46","line":2,"column":8,"nodeType":"44","messageId":"45","endLine":2,"endColumn":12},{"ruleId":"42","severity":1,"message":"47","line":183,"column":9,"nodeType":"44","messageId":"45","endLine":183,"endColumn":17},{"ruleId":"48","severity":1,"message":"49","line":203,"column":6,"nodeType":"50","endLine":203,"endColumn":8,"suggestions":"51"},{"ruleId":"42","severity":1,"message":"47","line":193,"column":9,"nodeType":"44","messageId":"45","endLine":193,"endColumn":17},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'tags' is defined but never used.","'interval' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'isStart' and 'response'. Either include them or remove the dependency array. You can also do a functional update 'setResponse(r => ...)' if you only need 'response' in the 'setResponse' call.","ArrayExpression",["54"],"no-global-assign","no-unsafe-negation",{"desc":"55","fix":"56"},"Update the dependencies array to be: [isStart, response]",{"range":"57","text":"58"},[6788,6790],"[isStart, response]"]